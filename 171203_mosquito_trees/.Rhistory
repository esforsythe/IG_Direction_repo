D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("R", "Q"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("R", "L"))]
return(c(top, D1, D2, D3))
}
#run the script
output<-lapply(trees, skeeter_depths)
output
length(trees)
c("Tops", "D1", "D2" ,"D3")
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
output_df
names(output_df)
table(output_df$Tops)
?subset
subset(output_df, Top="LQ")
subset(output_df, output_df$Top="LQ")
subset(output_df, output_df$Top=="LQ")
Sub_LQ<-subset(output_df, output_df$Top=="LQ")
#subset dataset
Sub_LQ<-subset(output_df, output_df$Top=="LQ")
Sub_RQ<-subset(output_df, output_df$Top=="RQ")
Sub_RL<-subset(output_df, output_df$Top=="RL")
Sub_RL
Sub_RQ
Sub_LQ
boxplot(
as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1), as.numeric(Sub_RL$D3)
)
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1))
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1))$p.value
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RL$D3))$p.value
#LQ vs RQ
wilcox.test(as.numeric(Sub_RL$D3), as.numeric(Sub_RQ$D1))$p.value
Sub_LQ$D2
as.numeric(Sub_LQ$D2)
as.numeric(Sub_LQ$D2)[500]
Sub_LQ$D2[500]
boxplot(
as.numeric(Sub_LQ$D1), as.numeric(Sub_RQ$D1),
as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D2),
as.numeric(Sub_LQ$D3), as.numeric(Sub_RQ$D3)
)
wilcox.test(as.numeric(Sub_LQ$D1), as.numeric(Sub_RQ$D1))
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D2))$p.value
wilcox.test(as.numeric(Sub_LQ$D3), as.numeric(Sub_RQ$D3))$p.value
trees[1:length(trees)-228]
trees[1:(length(trees)-228)]
trees<-trees[1:(length(trees)-228)]
#run the script
output<-lapply(trees, skeeter_depths)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
#subset dataset
Sub_LQ<-subset(output_df, output_df$Top=="LQ")
Sub_RQ<-subset(output_df, output_df$Top=="RQ")
Sub_RL<-subset(output_df, output_df$Top=="RL")
table(output_df$Tops)
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1), as.numeric(Sub_RL$D3)
)
#LQ vs RQ
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1))$p.value
#LQ vs RL
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RL$D3))$p.value
#LQ vs RQ
wilcox.test(as.numeric(Sub_RL$D3), as.numeric(Sub_RQ$D1))$p.value
boxplot(
as.numeric(Sub_LQ$D1), as.numeric(Sub_RQ$D1),
as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D2),
as.numeric(Sub_LQ$D3), as.numeric(Sub_RQ$D3)
)
wilcox.test(as.numeric(Sub_LQ$D1), as.numeric(Sub_RQ$D1))$p.value
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D2))$p.value
wilcox.test(as.numeric(Sub_LQ$D3), as.numeric(Sub_RQ$D3))$p.value
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1), as.numeric(Sub_RL$D3)
)
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_LQ$D1), as.numeric(Sub_RQ$D1),
as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D2),
as.numeric(Sub_LQ$D3), as.numeric(Sub_RQ$D3),
outline = FALSE
)
#R script for analysing the topologies of mosquito gene trees and calculated node depths
#in order to impliment our test of IG directionality
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/IG_Direction/IG_Direction_repo/171203_mosquito_trees")
install.packages("ape")
library(ape)
install.packages("phangorn")
library(phangorn)
install.packages("phytools")
library(phytools)
#Load trees and store the total number of trees
trees<-read.tree("catfile_mosquitotrees_171204")
tree<-trees[[500]]
root_tree<-midpoint(tree, node.labels="support")
root_tree
chrono_tree<-chronopl(root_tree, lambda = 0)
drop_tree<-drop.tip(chrono_tree, c("L", "Q"))
plot.phylo(drop_tree)
is.monophyletic(drop_tree, c("A", "G", "C")
is.monophyletic(drop_tree, c("A", "G", "C"))
is.monophyletic(drop_tree, c("A", "G", "C"))
is.monophyletic(drop_tree, c("A", "R"))
getMRCA(phy=drop_tree, c("A", "C", "G"))
getMRCA(phy=drop_tree, c("A", "R"))
getMRCA(phy=drop_tree, c("R", "C", "G"))
node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
##################################################################
##################################################################
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("L", "Q"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "R"))){
top<-"AR"
}else if(is.monophyletic(drop_tree, c("R", "C", "G"))){
top<-"R_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "R"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("R", "C", "G"))]
return(c(top, D1, D2, D3))
}
#############################
###### END FUNCTION  ########
#############################
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
output_df
table(output_df$Tops)
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AR<-subset(output_df, output_df$Top=="AR")
Sub_R_CG<-subset(output_df, output_df$Top=="R_CG")
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AR$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_R_CG)
)
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AR$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_R_CG$D3)
)
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_AR$D1), as.numeric(Sub_A_CG$D1),
as.numeric(Sub_AR$D2), as.numeric(Sub_A_CG$D2),
as.numeric(Sub_AR$D3), as.numeric(Sub_A_CG$D3),
outline = FALSE
)
wilcox.test(as.numeric(Sub_AR$D1), as.numeric(Sub_A_CG$D1))$p.value
wilcox.test(as.numeric(Sub_AR$D2), as.numeric(Sub_A_CG$D2))$p.value
wilcox.test(as.numeric(Sub_AR$D3), as.numeric(Sub_A_CG$D3))$p.value
##################################################################
##################################################################
#              REDO with slightly different taxa                 #
#                                                                #
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG2<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("L", "R"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "Q"))){
top<-"AQ"
}else if(is.monophyletic(drop_tree, c("Q", "C", "G"))){
top<-"Q_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "Q"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("Q", "C", "G"))]
return(c(top, D1, D2, D3))
}
#############################
###### END FUNCTION  ########
#############################
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG2)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
table(output_df)
table(output_df$Tops)
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AQ<-subset(output_df, output_df$Top=="AQ")
Sub_Q_CG<-subset(output_df, output_df$Top=="Q_CG")
boxplot(
as.numeric(Sub_AQ$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_Q_CG$D3)
)
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_AQ$D1), as.numeric(Sub_A_CG$D1),
as.numeric(Sub_AQ$D2), as.numeric(Sub_A_CG$D2),
as.numeric(Sub_AQ$D3), as.numeric(Sub_A_CG$D3),
outline = FALSE
)
wilcox.test(as.numeric(Sub_AQ$D3), as.numeric(Sub_A_CG$D3))$p.value
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AQ$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_Q_CG$D3)
)
##################################################################
##################################################################
#         REDO AGAIN with slightly different taxa AGAIN          #
#                                                                #
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG3<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("Q", "R"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "L"))){
top<-"AL"
}else if(is.monophyletic(drop_tree, c("L", "C", "G"))){
top<-"L_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "L"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("L", "C", "G"))]
return(c(top, D1, D2, D3))
}
#############################
###### END FUNCTION  ########
#############################
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG3)
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
table(output_df$Tops)
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AL<-subset(output_df, output_df$Top=="AL")
Sub_L_CG<-subset(output_df, output_df$Top=="L_CG")
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AL$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_L_CG$D3)
)
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_AL$D1), as.numeric(Sub_A_CG$D1),
as.numeric(Sub_AL$D2), as.numeric(Sub_A_CG$D2),
as.numeric(Sub_AL$D3), as.numeric(Sub_A_CG$D3),
outline = FALSE
)
wilcox.test(as.numeric(Sub_AL$D3), as.numeric(Sub_A_CG$D3))$p.value
rees<-trees[1:(length(trees)-228)]
trees<-trees[1:(length(trees)-228)]
##################################################################
##################################################################
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("L", "Q"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "R"))){
top<-"AR"
}else if(is.monophyletic(drop_tree, c("R", "C", "G"))){
top<-"R_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "R"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("R", "C", "G"))]
return(c(top, D1, D2, D3))
}
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AR<-subset(output_df, output_df$Top=="AR")
Sub_R_CG<-subset(output_df, output_df$Top=="R_CG")
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AR$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_R_CG$D3)
)
#LQ vs RQ
wilcox.test(as.numeric(Sub_LQ$D2), as.numeric(Sub_RQ$D1))$p.value
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_AR$D1), as.numeric(Sub_A_CG$D1),
as.numeric(Sub_AR$D2), as.numeric(Sub_A_CG$D2),
as.numeric(Sub_AR$D3), as.numeric(Sub_A_CG$D3),
outline = FALSE
)
wilcox.test(as.numeric(Sub_AR$D3), as.numeric(Sub_A_CG$D3))$p.value
##################################################################
##################################################################
#              REDO with slightly different taxa                 #
#                                                                #
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG2<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("L", "R"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "Q"))){
top<-"AQ"
}else if(is.monophyletic(drop_tree, c("Q", "C", "G"))){
top<-"Q_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "Q"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("Q", "C", "G"))]
return(c(top, D1, D2, D3))
}
#############################
###### END FUNCTION  ########
#############################
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG2)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AQ<-subset(output_df, output_df$Top=="AQ")
Sub_Q_CG<-subset(output_df, output_df$Top=="Q_CG")
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AQ$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_Q_CG$D3)
)
##################################################################
##################################################################
#         REDO AGAIN with slightly different taxa AGAIN          #
#                                                                #
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG3<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("Q", "R"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "L"))){
top<-"AL"
}else if(is.monophyletic(drop_tree, c("L", "C", "G"))){
top<-"L_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "L"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("L", "C", "G"))]
return(c(top, D1, D2, D3))
}
#############################
###### END FUNCTION  ########
#############################
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG3)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AL<-subset(output_df, output_df$Top=="AL")
Sub_L_CG<-subset(output_df, output_df$Top=="L_CG")
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AL$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_L_CG$D3)
)
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_AL$D1), as.numeric(Sub_A_CG$D1),
as.numeric(Sub_AL$D2), as.numeric(Sub_A_CG$D2),
as.numeric(Sub_AL$D3), as.numeric(Sub_A_CG$D3),
outline = FALSE
)
##################################################################
##################################################################
#              REDO with slightly different taxa                 #
#                                                                #
#THIS IS A FUNCTION FOR THE A - (C,G) (ara - (col, gam)) IG event#
##################################################################
##################################################################
skeeter_depths_A_CG_IG2<-function(tree){
#midpoint root the tree
#chose this method for rooting because it allows me to calculate of node depths involving species R
root_tree<-midpoint(tree, node.labels="support")
#Turn tree into chronogram
#Note that lambda=0 here. I may need to explore this parameter
chrono_tree<-chronopl(root_tree, lambda = 0)
#now drop extra tips from tree
drop_tree<-drop.tip(chrono_tree, c("L", "R"))
#Now return the topology of the tree
if(is.monophyletic(drop_tree, c("A", "G", "C"))){
top<-"A_CG"
}else if(is.monophyletic(drop_tree, c("A", "Q"))){
top<-"AQ"
}else if(is.monophyletic(drop_tree, c("Q", "C", "G"))){
top<-"Q_CG"
}else{
top<-"NA"
}
#Get node depths for trees
D1<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "C", "G"))]
D2<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("A", "Q"))]
D3<-1-node.depth.edgelength(drop_tree)[getMRCA(phy=drop_tree, c("Q", "C", "G"))]
return(c(top, D1, D2, D3))
}
#############################
###### END FUNCTION  ########
#############################
#run the script
output<-lapply(trees, skeeter_depths_A_CG_IG2)
#clean up output
#convert the output from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=length(trees), byrow=TRUE), stringsAsFactors = FALSE)
names(output_df) <- c("Tops", "D1", "D2" ,"D3")
#subset dataset
Sub_A_CG<-subset(output_df, output_df$Top=="A_CG")
Sub_AQ<-subset(output_df, output_df$Top=="AQ")
Sub_Q_CG<-subset(output_df, output_df$Top=="Q_CG")
#Box plot for "T2" nodes from each tree
boxplot(
as.numeric(Sub_AQ$D2), as.numeric(Sub_A_CG$D1), as.numeric(Sub_Q_CG$D3)
)
### NOW DO IG directionality test!
boxplot(
as.numeric(Sub_AQ$D1), as.numeric(Sub_A_CG$D1),
as.numeric(Sub_AQ$D2), as.numeric(Sub_A_CG$D2),
as.numeric(Sub_AQ$D3), as.numeric(Sub_A_CG$D3),
outline = FALSE
)
