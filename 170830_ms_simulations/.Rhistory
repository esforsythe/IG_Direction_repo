propIG<-c(0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
#start a nested loop for proportion of genome introgressed
for(z in 1:length(propIG)){
#Assign the final dataset for speciation genes
sp_finalS2<-sample(stats_out_df$S2sp, ((1-(propIG[z]))*1000))
sp_finalS3<-sample(stats_out_df$S3sp, ((1-(propIG[z]))*1000))
#Assign the final dataset for IG genes
ig_finalS2<-sample(total_S2, propIG[z]*1000)
ig_finalS3<-sample(total_S3, propIG[z]*1000)
#Ask which hypothesis S2 is consistent with
if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) < median(ig_finalS2)){
S2_concl<-32
}else if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) > median(ig_finalS2)) {
S2_concl<-0
}else{S2_concl<-23}
#Ask which hypothesis S3 is consistent with
if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) < median(ig_finalS3)){
S3_concl<-0
}else if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) > median(ig_finalS3)) {
S3_concl<-23
}else{S3_concl<-32}
#store results to a matrix of results
matS2[z,y]<-S2_concl
matS3[z,y]<-S3_concl
}
}
matS2
matS3
#### Vary the proportion that were introgressed in each direction
#Make a variable "prop3_2", which is the proportion of the introgressed genes
#that were introgressed from 3 to 2. The proportion of introgressed gene from 2 to 3 = 1-prop3_2
#initiate an empty matrix
matS2<-matrix(, ncol = 11, nrow = 9)
matS3<-matrix(, ncol = 11, nrow = 9)
prop3_2<-c(0, 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
for(y in 1:length(prop3_2)){
#total measurement from uni or bidirectional introgressed genes.
total_S2<-c(sample(stats_out_df$S2igto2, prop3_2[y]*1000),sample(stats_out_df$S2igto3, ((1-(prop3_2[y]))*1000)))
total_S3<-c(sample(stats_out_df$S3igto2, prop3_2[y]*1000),sample(stats_out_df$S3igto3, ((1-(prop3_2[y]))*1000)))
#subsample the totals to test different numbers of introgressed vs speciation genes
#different value of the proportion of the genome that was introgressed
propIG<-c(0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
#start a nested loop for proportion of genome introgressed
for(z in 1:length(propIG)){
#Assign the final dataset for speciation genes
sp_finalS2<-sample(stats_out_df$S2sp, ((1-(propIG[z]))*1000))
sp_finalS3<-sample(stats_out_df$S3sp, ((1-(propIG[z]))*1000))
#Assign the final dataset for IG genes
ig_finalS2<-sample(total_S2, propIG[z]*1000)
ig_finalS3<-sample(total_S3, propIG[z]*1000)
#Ask which hypothesis S2 is consistent with
if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) < median(ig_finalS2)){
S2_concl<-32
}else if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) > median(ig_finalS2)) {
S2_concl<-0
}else{S2_concl<-23}
#Ask which hypothesis S3 is consistent with
if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) < median(ig_finalS3)){
S3_concl<-0
}else if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) > median(ig_finalS3)) {
S3_concl<-23
}else{S3_concl<-32}
#store results to a matrix of results
matS2[z+1,y+1]<-S2_concl
matS3[z+1,y+1]<-S3_concl
}
}
matS2
propIG<-c(0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
length(propIG)
length(propIG)
length(prop3_2)
#initiate an empty matrix
matS2<-matrix(, ncol = 10, nrow = 8)
matS3<-matrix(, ncol = 10, nrow = 8)
prop3_2<-c(0, 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
for(y in 1:length(prop3_2)){
#total measurement from uni or bidirectional introgressed genes.
total_S2<-c(sample(stats_out_df$S2igto2, prop3_2[y]*1000),sample(stats_out_df$S2igto3, ((1-(prop3_2[y]))*1000)))
total_S3<-c(sample(stats_out_df$S3igto2, prop3_2[y]*1000),sample(stats_out_df$S3igto3, ((1-(prop3_2[y]))*1000)))
#subsample the totals to test different numbers of introgressed vs speciation genes
#different value of the proportion of the genome that was introgressed
propIG<-c(0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
#start a nested loop for proportion of genome introgressed
for(z in 1:length(propIG)){
#Assign the final dataset for speciation genes
sp_finalS2<-sample(stats_out_df$S2sp, ((1-(propIG[z]))*1000))
sp_finalS3<-sample(stats_out_df$S3sp, ((1-(propIG[z]))*1000))
#Assign the final dataset for IG genes
ig_finalS2<-sample(total_S2, propIG[z]*1000)
ig_finalS3<-sample(total_S3, propIG[z]*1000)
#Ask which hypothesis S2 is consistent with
if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) < median(ig_finalS2)){
S2_concl<-32
}else if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) > median(ig_finalS2)) {
S2_concl<-0
}else{S2_concl<-23}
#Ask which hypothesis S3 is consistent with
if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) < median(ig_finalS3)){
S3_concl<-0
}else if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) > median(ig_finalS3)) {
S3_concl<-23
}else{S3_concl<-32}
#store results to a matrix of results
matS2[z,y]<-S2_concl
matS3[z,y]<-S3_concl
}
}
matS2
matS3
row.names(matS2)<-propIG
matS2
col.names(matS2)
names(matS2)
colnames(matS2)
colnames(matS2)<-prop3_2
matS2
length(prop3_2)
length(propIG)
mat_comb<-matrix(, ncol = 10, nrow = 8)
matS2[2,4]
isTRUE(matS2[2,4]==matS3[2,4])
matS3[2,4]
isTRUE(matS2[2,2]==matS3[2,4])
#Now combine the two results
mat_comb<-matrix(, ncol = 10, nrow = 8)
for(y in 1:length(prop3_2)){
for(z in 1:length(propIG)){
if(matS2[y,z]==matS3[y,z] &){
mat_comb[y,z]<-matS2[y,z]
}else{
mat_comb[y,z]<-0
}
}
}
mat_comb<-matrix(, ncol = 10, nrow = 8)
for(y in 1:length(prop3_2)){
for(z in 1:length(propIG)){
if(matS2[y,z]==matS3[y,z]){
mat_comb[y,z]<-matS2[y,z]
}else{
mat_comb[y,z]<-0
}
}
}
mat_comb
#Now combine the two results
mat_comb<-matrix(, ncol = 10, nrow = 8)
for(y in 1:length(prop3_2)){
for(z in 1:length(propIG)){
if(matS2[z,y]==matS3[z,y]){
mat_comb[z,y]<-matS2[z,y]
}else{
mat_comb[z,y]<-0
}
}
}
mat_comb
row.names(mat_comb)<-propIG
colnames(mat_comb)<-prop3_2
mat_comb
df_comb<-as.data.frame(mat_comb)
df_comb
?melt
library(ggplot2)
library(reshape2)
?melt
df_melt<-melt(df_comb)
df_melt
?heatmap
heatmap(mat_comb)
?heatmap
heatmap(mat_comb, Colv = FALSE, Rowv = FALSE)
heatmap(mat_comb, Colv = FALSE, Rowv = FALSE)
#Now combine the two results
mat_comb<-matrix(, ncol = 10, nrow = 8)
for(y in 1:length(prop3_2)){
for(z in 1:length(propIG)){
if(matS2[z,y]==matS3[z,y]){
mat_comb[z,y]<-matS2[z,y]
}else{
mat_comb[z,y]<-0
}
}
}
row.names(mat_comb)<-propIG
colnames(mat_comb)<-prop3_2
mat_comb
heatmap(mat_comb, Colv = FALSE, Rowv = FALSE)
mat_comb
?heatmap
heatmap(mat_comb, Colv = FALSE, Rowv = FALSE, keep.dendro = FALSE)
mat_comb
?heatmap
heatmap(mat_comb, Colv = NA, Rowv = NA, keep.dendro = FALSE)
?geom_tile
?heatmap.2
library(gplots)
install.packages("gplots")
library(gplots)
?heatmap.2
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat),rowsep=1:nrow(mat),
key=FALSE,trace="none",
cexRow=2,cexCol=2,srtCol=45,
margins=c(10,10),
main="Gene presence, absence and duplication in three species")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=2,cexCol=2,srtCol=45,
margins=c(10,10),
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=2,cexCol=2,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=2,cexCol=2,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
eatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=2,cexCol=2,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=2,cexCol=2,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=1,cexCol=2,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=1,cexCol=1,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=1,cexCol=1,srtCol=100,
margins=c(10,10),
main="1000 genes sampled")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("red","green","yellow"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=1,cexCol=1,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
colorRampPalette(c("white","green","black"))(3),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=1,cexCol=1,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
?heatmap.2
heatmap.2(mat_comb, Rowv=NA, Colv=FALSE, dendrogram='none' ,col =
c("white","red","black"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key=FALSE,trace="none",
cexRow=1,cexCol=1,srtCol=45,
margins=c(10,10),
main="1000 genes sampled")
mat_comb
install.packages(gplots)
library(gplots)
(-1)
#initiate an empty matrix
matS2<-matrix(, ncol = 10, nrow = 8)
matS3<-matrix(, ncol = 10, nrow = 8)
prop3_2<-c(0, 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
for(y in 1:length(prop3_2)){
#total measurement from uni or bidirectional introgressed genes.
total_S2<-c(sample(stats_out_df$S2igto2, prop3_2[y]*1000),sample(stats_out_df$S2igto3, ((1-(prop3_2[y]))*1000)))
total_S3<-c(sample(stats_out_df$S3igto2, prop3_2[y]*1000),sample(stats_out_df$S3igto3, ((1-(prop3_2[y]))*1000)))
#subsample the totals to test different numbers of introgressed vs speciation genes
#different value of the proportion of the genome that was introgressed
propIG<-c(0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
#start a nested loop for proportion of genome introgressed
for(z in 1:length(propIG)){
#Assign the final dataset for speciation genes
sp_finalS2<-sample(stats_out_df$S2sp, ((1-(propIG[z]))*1000))
sp_finalS3<-sample(stats_out_df$S3sp, ((1-(propIG[z]))*1000))
#Assign the final dataset for IG genes
ig_finalS2<-sample(total_S2, propIG[z]*1000)
ig_finalS3<-sample(total_S3, propIG[z]*1000)
# 32 = -1
# 23 = 1
#Ask which hypothesis S2 is consistent with
if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) < median(ig_finalS2)){
S2_concl<-(-1)
}else if(wilcox.test(sp_finalS2,ig_finalS2)$p.value < 0.05 &
median(sp_finalS2) > median(ig_finalS2)) {
S2_concl<-0
}else{S2_concl<-1}
#Ask which hypothesis S3 is consistent with
if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) < median(ig_finalS3)){
S3_concl<-0
}else if(wilcox.test(sp_finalS3,ig_finalS3)$p.value < 0.05 &
median(sp_finalS3) > median(ig_finalS3)) {
S3_concl<-1
}else{S3_concl<-(-1)}
#store results to a matrix of results
matS2[z,y]<-S2_concl
matS3[z,y]<-S3_concl
}
}
#clean up S2 and S3 matrix
row.names(matS2)<-propIG
colnames(matS2)<-prop3_2
row.names(matS3)<-propIG
colnames(matS3)<-prop3_2
#Now combine the two results
mat_comb<-matrix(, ncol = 10, nrow = 8)
for(y in 1:length(prop3_2)){
for(z in 1:length(propIG)){
if(matS2[z,y]==matS3[z,y]){
mat_comb[z,y]<-matS2[z,y]
}else{
mat_comb[z,y]<-0
}
}
}
row.names(mat_comb)<-propIG
colnames(mat_comb)<-prop3_2
mat_comb
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL,)
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL,
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb)
)
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL,
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
mat_comb
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL, col=c("red", "white", "black")
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL, col=c("red", "white", "black"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL, col=c("red", "white", "black"),
sepwidth=c(0.01,0.02),sepcolor="light black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
heatmap.2(mat_comb, Rowv = NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
?heatmap.2
heatmap.2(mat_comb, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
#This is a script for simulating sequence evolution during speciation and introgression
#I'll aslo use this script to test my test for directionality of IG.
#Set the working directory
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/IG_Direction/IG_Direction_repo/170830_ms_simulations")
heatmap.2(mat_comb, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
install.packages(gplots)
library(gplots)
heatmap.2(mat_comb, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb),rowsep=1:nrow(mat_comb),
key = FALSE, trace = "none"
)
mat_comb[ nrow(mat_comb):1, ]
mat_comb_new<-mat_comb[ nrow(mat_comb):1, ]
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none"
)
?heatmap.2
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = TRUE, trace = "none"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none"
)
?heatmap.2
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = "1000 genes sampled",
xlab = "proportion of introgressed genes introgressed from 3 to 2"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = "1000 genes sampled",
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
reps<-5000
c(reps,"genes sampled")
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = c(reps,"genes sampled"),
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = c(1000,"genes sampled"),
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = reps"genes sampled"),
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = "reps genes sampled"),
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = "reps genes sampled",
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = reps"genes sampled",
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = c(reps,"genes sampled"),
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
heatmap.2(mat_comb_new, Rowv =NULL, Colv = NULL, col=c("red", "white", "dark gray"),
sepwidth=c(0.01,0.02),sepcolor="black",colsep=1:ncol(mat_comb_new),rowsep=1:nrow(mat_comb_new),
key = FALSE, trace = "none", main = c(1000,"genes sampled"),
xlab = "proportion of introgressed genes introgressed from 3 to 2",
ylab = "proportion of sampled genes introgressed"
)
.5*5000
.6*5000
.7*5000
.8*5000
#Set the working directory
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/IG_Direction/IG_Direction_repo/170830_ms_simulations")
install.packages("phyclust")
library(phyclust)
library(parallel)
library(plyr)
install.packages("seqinr")
library(seqinr)
#Set the working directory
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/IG_Direction/IG_Direction_repo/170830_ms_simulations")
install.packages("phyclust")
library(phyclust)
library(parallel)
library(plyr)
install.packages("seqinr")
library(seqinr)
#This is a script for simulating sequence evolution during speciation and introgression
#I'll aslo use this script to test my test for directionality of IG.
#Set the working directory
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/IG_Direction/IG_Direction_repo/170830_ms_simulations")
install.packages("phyclust")
library(parallel)
library(plyr)
install.packages("seqinr")
library(seqinr)
